/** Generated by itemis CREATE code generator. */

#ifndef BLINK_REQUIRED_H_
#define BLINK_REQUIRED_H_

#include "sc_types.h"
#include "blink.h"

#ifdef __cplusplus
extern "C"
{
#endif 

/*! \file
This header defines prototypes for all functions that are required by the state machine implementation.

This is a state machine uses time events which require access to a timing service. Thus the function prototypes:
- blink_set_timer and
- blink_unset_timer
are defined.
This state machine makes use of operations declared in the state machines interface or internal scopes. Thus the function prototypes:
- blink_switchOn
- blink_switchOff
are defined.

These functions will be called during a 'run to completion step' (runCycle) of the statechart. 
There are some constraints that have to be considered for the implementation of these functions:
- never call the statechart API functions from within these functions.
- make sure that the execution time is as short as possible.

*/
extern void blink_switchOn( Blink* handle, const sc_integer led);
extern void blink_switchOff( Blink* handle, const sc_integer led);



/*! 
This function has to set up timers for the time events that are required by the state machine.
It will be called for each time event that is relevant for a state when a state will be entered.
\param evid An unique identifier of the event.
\time_ms The time in milliseconds
\periodic Indicates the the time event must be raised periodically until the timer is unset 
*/
extern void blink_set_timer(Blink* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic);

/*! 
This function has to unset timers for the time events that are required by the state machine.
It will be called for each time event that is relevant for a state when a state will be left.
\param evid An unique identifier of the event.
*/
extern void blink_unset_timer(Blink* handle, const sc_eventid evid);



#ifdef __cplusplus
}
#endif 

#endif /* BLINK_REQUIRED_H_ */
