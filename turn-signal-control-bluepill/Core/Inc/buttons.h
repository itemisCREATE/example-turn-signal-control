/** Generated by itemis CREATE code generator. */

#ifndef BUTTONS_H_
#define BUTTONS_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the Buttons state machine.
*/
typedef struct Buttons Buttons;

/*!
* Forward declaration of the data structure for the ButtonsIface interface scope.
*/
typedef struct ButtonsIface ButtonsIface;

/*!
* Forward declaration of the data structure for the ButtonsInternal interface scope.
*/
typedef struct ButtonsInternal ButtonsInternal;

/*!
* Forward declaration of the data structure for the ButtonsTimeEvents interface scope.
*/
typedef struct ButtonsTimeEvents ButtonsTimeEvents;

#ifdef __cplusplus
}
#endif

#include <main.h>
#include <stm32f1xx_hal_gpio.h>
#include "sc_types.h"
#include <string.h>

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file
Header of the state machine 'buttons'.
*/

/*! Define number of states in the state enum */
#define BUTTONS_STATE_COUNT 18

/*! Define dimension of the state configuration vector for orthogonal states. */
#define BUTTONS_MAX_ORTHOGONAL_STATES 5
/*! Define maximum number of time events that can be active at once */
#define BUTTONS_MAX_PARALLEL_TIME_EVENTS 5

/*! Define indices of states in the StateConfVector */
#define SCVI_BUTTONS_RIGHT_RELEASED 0
#define SCVI_BUTTONS_RIGHT_DEBOUNCE_PRESS 0
#define SCVI_BUTTONS_RIGHT_PRESSED 0
#define SCVI_BUTTONS_RIGHT_DEBOUNCE_RELEASE 0
#define SCVI_BUTTONS_GESTURE_RIGHT_IDLE 1
#define SCVI_BUTTONS_GESTURE_RIGHT_PRESS 1
#define SCVI_BUTTONS_GESTURE_RIGHT_SELECT 1
#define SCVI_BUTTONS_LEFT_RELEASED 2
#define SCVI_BUTTONS_LEFT_DEBOUNCE_PRESS 2
#define SCVI_BUTTONS_LEFT_PRESSED 2
#define SCVI_BUTTONS_LEFT_DEBOUNCE_RELEASE 2
#define SCVI_BUTTONS_GESTURE_LEFT_IDLE 3
#define SCVI_BUTTONS_GESTURE_LEFT_PRESS 3
#define SCVI_BUTTONS_GESTURE_LEFT_SELECT 3
#define SCVI_BUTTONS_HAZARD_RELEASED 4
#define SCVI_BUTTONS_HAZARD_DEBOUNCE_PRESS 4
#define SCVI_BUTTONS_HAZARD_PRESSED 4
#define SCVI_BUTTONS_HAZARD_DEBOUNCE_RELEASE 4

/*! Enumeration of all states */ 
typedef enum
{
	Buttons_last_state,
	Buttons_right_released,
	Buttons_right_debounce_press,
	Buttons_right_pressed,
	Buttons_right_debounce_release,
	Buttons_gesture_right_Idle,
	Buttons_gesture_right_Press,
	Buttons_gesture_right_Select,
	Buttons_left_released,
	Buttons_left_debounce_press,
	Buttons_left_pressed,
	Buttons_left_debounce_release,
	Buttons_gesture_left_Idle,
	Buttons_gesture_left_Press,
	Buttons_gesture_left_Select,
	Buttons_hazard_released,
	Buttons_hazard_debounce_press,
	Buttons_hazard_pressed,
	Buttons_hazard_debounce_release
} ButtonsStates;




/*! Type declaration of the data structure for the ButtonsIface interface scope. */
struct ButtonsIface
{
	sc_integer t_debounce;
	sc_integer t_select;
};



/*! Type declaration of the data structure for the ButtonsInternal interface scope. */
struct ButtonsInternal
{
	sc_boolean pressedRight_raised;
	sc_boolean releasedRight_raised;
	sc_boolean pressedLeft_raised;
	sc_boolean releasedLeft_raised;
};



/*! Type declaration of the data structure for the ButtonsTimeEvents interface scope. */
struct ButtonsTimeEvents
{
	sc_boolean buttons_right_debounce_press_tev0_raised;
	sc_boolean buttons_right_debounce_release_tev0_raised;
	sc_boolean buttons_gesture_right_Press_tev0_raised;
	sc_boolean buttons_left_debounce_press_tev0_raised;
	sc_boolean buttons_left_debounce_release_tev0_raised;
	sc_boolean buttons_gesture_left_Press_tev0_raised;
	sc_boolean buttons_hazard_debounce_press_tev0_raised;
	sc_boolean buttons_hazard_debounce_release_tev0_raised;
};





typedef struct buttonsInternalEvBuf buttonsInternalEvBuf;
struct buttonsInternalEvBuf {
	sc_boolean pressedRight_raised;
	sc_boolean releasedRight_raised;
	sc_boolean pressedLeft_raised;
	sc_boolean releasedLeft_raised;
};

typedef struct buttonsTimeEventsEvBuf buttonsTimeEventsEvBuf;
struct buttonsTimeEventsEvBuf {
	sc_boolean buttons_right_debounce_press_time_event_0_raised;
	sc_boolean buttons_right_debounce_release_time_event_0_raised;
	sc_boolean buttons_gesture_right_Press_time_event_0_raised;
	sc_boolean buttons_left_debounce_press_time_event_0_raised;
	sc_boolean buttons_left_debounce_release_time_event_0_raised;
	sc_boolean buttons_gesture_left_Press_time_event_0_raised;
	sc_boolean buttons_hazard_debounce_press_time_event_0_raised;
	sc_boolean buttons_hazard_debounce_release_time_event_0_raised;
};

typedef struct buttonsEvBuf buttonsEvBuf;
struct buttonsEvBuf {
	buttonsInternalEvBuf internal;
	buttonsTimeEventsEvBuf timeEvents;
};


/*! 
 * Type declaration of the data structure for the Buttons state machine.
 * This data structure has to be allocated by the client code. 
 */
struct Buttons
{
	ButtonsStates stateConfVector[BUTTONS_MAX_ORTHOGONAL_STATES];
	ButtonsIface iface;
	ButtonsInternal internal;
	ButtonsTimeEvents timeEvents;
	buttonsEvBuf current;
	sc_boolean isExecuting;
	sc_integer stateConfVectorPosition;
};



/*! Initializes the Buttons state machine data structures. Must be called before first usage.*/
extern void buttons_init(Buttons* handle);


/*! Performs a 'run to completion' step. */
extern void buttons_run_cycle(Buttons* handle);

/*! Activates the state machine. */
extern void buttons_enter(Buttons* handle);

/*! Deactivates the state machine. */
extern void buttons_exit(Buttons* handle);



/*! Raises a time event. */
extern void buttons_raise_time_event(Buttons* handle, sc_eventid evid);

/*! Gets the value of the variable 't_debounce' that is defined in the default interface scope. */ 
extern sc_integer buttons_get_t_debounce(const Buttons* handle);
/*! Sets the value of the variable 't_debounce' that is defined in the default interface scope. */ 
extern void buttons_set_t_debounce(Buttons* handle, sc_integer value);
/*! Gets the value of the variable 't_select' that is defined in the default interface scope. */ 
extern sc_integer buttons_get_t_select(const Buttons* handle);
/*! Sets the value of the variable 't_select' that is defined in the default interface scope. */ 
extern void buttons_set_t_select(Buttons* handle, sc_integer value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean buttons_is_active(const Buttons* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean buttons_is_final(const Buttons* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean buttons_is_state_active(const Buttons* handle, ButtonsStates state);


#ifdef __cplusplus
}
#endif 

#endif /* BUTTONS_H_ */
