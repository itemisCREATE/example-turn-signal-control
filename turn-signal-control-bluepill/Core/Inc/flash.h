/** Generated by itemis CREATE code generator. */

#ifndef FLASH_H_
#define FLASH_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the Flash state machine.
*/
typedef struct Flash Flash;

/*!
* Forward declaration of the data structure for the FlashIface interface scope.
*/
typedef struct FlashIface FlashIface;

/*!
* Forward declaration of the data structure for the FlashTimeEvents interface scope.
*/
typedef struct FlashTimeEvents FlashTimeEvents;

#ifdef __cplusplus
}
#endif

#include "sc_types.h"
#include <string.h>

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file
Header of the state machine 'flash'.
*/

#ifndef FLASH_EVENTQUEUE_BUFFERSIZE
#define FLASH_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef FLASH_IN_EVENTQUEUE_BUFFERSIZE
#define FLASH_IN_EVENTQUEUE_BUFFERSIZE FLASH_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define FLASH_STATE_COUNT 2

/*! Define dimension of the state configuration vector for orthogonal states. */
#define FLASH_MAX_ORTHOGONAL_STATES 1
/*! Define maximum number of time events that can be active at once */
#define FLASH_MAX_PARALLEL_TIME_EVENTS 1

/*! Define indices of states in the StateConfVector */
#define SCVI_FLASH_FLASH_LIGHT 0
#define SCVI_FLASH_FLASH_DARK 0


/* 
 * Enum of event names in the statechart.
 */
typedef enum  {
	Flash_invalid_event = SC_INVALID_EVENT_VALUE,
	Flash_flash_flash_Light_time_event_0,
	Flash_flash_flash_Dark_time_event_0
} FlashEventID;

/*
 * Struct that represents a single event.
 */
typedef struct {
	FlashEventID name;
} flash_event;

/*
 * Queue that holds the raised events.
 */
typedef struct flash_eventqueue_s {
	flash_event *events;
	sc_integer capacity;
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} flash_eventqueue;

/*! Enumeration of all states */ 
typedef enum
{
	Flash_last_state,
	Flash_flash_Light,
	Flash_flash_Dark
} FlashStates;


/*! Type declaration of the data structure for the FlashIface interface scope. */
struct FlashIface
{
	sc_integer t_light;
	sc_integer t_dark;
};





/*! Type declaration of the data structure for the FlashTimeEvents interface scope. */
struct FlashTimeEvents
{
	sc_boolean flash_flash_Light_tev0_raised;
	sc_boolean flash_flash_Dark_tev0_raised;
};






/*! 
 * Type declaration of the data structure for the Flash state machine.
 * This data structure has to be allocated by the client code. 
 */
struct Flash
{
	FlashStates stateConfVector[FLASH_MAX_ORTHOGONAL_STATES];
	FlashIface iface;
	FlashTimeEvents timeEvents;
	sc_boolean isExecuting;
	flash_eventqueue in_event_queue;
	flash_event in_buffer[FLASH_IN_EVENTQUEUE_BUFFERSIZE];
};



/*! Initializes the Flash state machine data structures. Must be called before first usage.*/
extern void flash_init(Flash* handle);


/*! Activates the state machine. */
extern void flash_enter(Flash* handle);

/*! Deactivates the state machine. */
extern void flash_exit(Flash* handle);

/*! 
Can be used by the client code to trigger a run to completion step without raising an event.
*/
extern void flash_trigger_without_event(Flash* handle);


/*! Raises a time event. */
extern void flash_raise_time_event(Flash* handle, sc_eventid evid);

/*! Gets the value of the variable 't_light' that is defined in the default interface scope. */ 
extern sc_integer flash_get_t_light(const Flash* handle);
/*! Sets the value of the variable 't_light' that is defined in the default interface scope. */ 
extern void flash_set_t_light(Flash* handle, sc_integer value);
/*! Gets the value of the variable 't_dark' that is defined in the default interface scope. */ 
extern sc_integer flash_get_t_dark(const Flash* handle);
/*! Sets the value of the variable 't_dark' that is defined in the default interface scope. */ 
extern void flash_set_t_dark(Flash* handle, sc_integer value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean flash_is_active(const Flash* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean flash_is_final(const Flash* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean flash_is_state_active(const Flash* handle, FlashStates state);


#ifdef __cplusplus
}
#endif 

#endif /* FLASH_H_ */
